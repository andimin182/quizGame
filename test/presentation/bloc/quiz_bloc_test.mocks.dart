// Mocks generated by Mockito 5.3.0 from annotations
// in quiz/test/presentation/bloc/quiz_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:quiz/core/error.dart' as _i5;
import 'package:quiz/core/util/input_converter.dart' as _i4;
import 'package:quiz/data/models/request/quiz_request.dart' as _i9;
import 'package:quiz/domain/entities/quiz_entity.dart' as _i8;
import 'package:quiz/domain/repositories/quiz_repository_contract.dart' as _i3;
import 'package:quiz/domain/usecases/quiz_usecase.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuizRepository_1 extends _i1.SmartFake
    implements _i3.QuizRepository {
  _FakeQuizRepository_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i5.Failure, int> stringToUnsignedInteger(String? stringToConv) =>
      (super.noSuchMethod(
              Invocation.method(#stringToUnsignedInteger, [stringToConv]),
              returnValue: _FakeEither_0<_i5.Failure, int>(this,
                  Invocation.method(#stringToUnsignedInteger, [stringToConv])))
          as _i2.Either<_i5.Failure, int>);
  @override
  _i2.Either<_i5.Failure, String> checkString(String? stringToCheck) =>
      (super.noSuchMethod(Invocation.method(#checkString, [stringToCheck]),
              returnValue: _FakeEither_0<_i5.Failure, String>(
                  this, Invocation.method(#checkString, [stringToCheck])))
          as _i2.Either<_i5.Failure, String>);
}

/// A class which mocks [GetQuestions].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetQuestions extends _i1.Mock implements _i6.GetQuestions {
  MockGetQuestions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.QuizRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue:
                  _FakeQuizRepository_1(this, Invocation.getter(#repository)))
          as _i3.QuizRepository);
  @override
  _i7.Future<_i2.Either<_i5.Failure, List<_i8.Question>>> execute(
          {_i9.QuestionRequest? request}) =>
      (super.noSuchMethod(Invocation.method(#execute, [], {#request: request}),
              returnValue:
                  _i7.Future<_i2.Either<_i5.Failure, List<_i8.Question>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i8.Question>>(
                          this,
                          Invocation.method(
                              #execute, [], {#request: request}))))
          as _i7.Future<_i2.Either<_i5.Failure, List<_i8.Question>>>);
}
